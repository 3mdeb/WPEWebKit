/*
 * Copyright (C) 2013 Google Inc. All rights reserved.
 * Copyright (C) 2013-2016 Apple Inc. All rights reserved.
 * Copyright (C) 2014 University of Washington. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

// DO NOT EDIT THIS FILE. It is automatically generated from Automation.json
// by the script: Source/JavaScriptCore/inspector/scripts/generate-inspector-protocol-bindings.py

#include "config.h"
#include "AutomationProtocolObjects.h"

#include <wtf/Optional.h>
#include <wtf/text/CString.h>

namespace Inspector {

namespace Protocol {

namespace AutomationHelpers {

static const char* const enum_constant_values[] = {
    "InternalError",
    "Timeout",
    "JavaScriptError",
    "JavaScriptTimeout",
    "WindowNotFound",
    "FrameNotFound",
    "NodeNotFound",
    "NoJavaScriptDialog",
    "NotImplemented",
    "MissingParameter",
    "InvalidParameter",
    "Move",
    "Down",
    "Up",
    "SingleClick",
    "DoubleClick",
    "None",
    "Left",
    "Middle",
    "Right",
    "CapsLock",
    "Control",
    "Shift",
    "Meta",
    "Alt",
    "Alternate",
    "Command",
    "Cancel",
    "Help",
    "Backspace",
    "Tab",
    "Clear",
    "Enter",
    "Pause",
    "Escape",
    "PageUp",
    "PageDown",
    "End",
    "Home",
    "LeftArrow",
    "UpArrow",
    "RightArrow",
    "DownArrow",
    "Insert",
    "Delete",
    "Space",
    "Semicolon",
    "Equals",
    "Return",
    "NumberPad0",
    "NumberPad1",
    "NumberPad2",
    "NumberPad3",
    "NumberPad4",
    "NumberPad5",
    "NumberPad6",
    "NumberPad7",
    "NumberPad8",
    "NumberPad9",
    "NumberPadMultiply",
    "NumberPadAdd",
    "NumberPadSeparator",
    "NumberPadSubtract",
    "NumberPadDecimal",
    "NumberPadDivide",
    "Function1",
    "Function2",
    "Function3",
    "Function4",
    "Function5",
    "Function6",
    "Function7",
    "Function8",
    "Function9",
    "Function10",
    "Function11",
    "Function12",
    "KeyPress",
    "KeyRelease",
    "InsertByKey",
};

String getEnumConstantValue(int code) {
    return enum_constant_values[code];
}

// Enums in the 'Automation' Domain
template<>
Optional<Inspector::Protocol::Automation::ErrorMessage> parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(const String& protocolString)
{
    static const size_t constantValues[] = {
        (size_t)Inspector::Protocol::Automation::ErrorMessage::InternalError,
        (size_t)Inspector::Protocol::Automation::ErrorMessage::Timeout,
        (size_t)Inspector::Protocol::Automation::ErrorMessage::JavaScriptError,
        (size_t)Inspector::Protocol::Automation::ErrorMessage::JavaScriptTimeout,
        (size_t)Inspector::Protocol::Automation::ErrorMessage::WindowNotFound,
        (size_t)Inspector::Protocol::Automation::ErrorMessage::FrameNotFound,
        (size_t)Inspector::Protocol::Automation::ErrorMessage::NodeNotFound,
        (size_t)Inspector::Protocol::Automation::ErrorMessage::NoJavaScriptDialog,
        (size_t)Inspector::Protocol::Automation::ErrorMessage::NotImplemented,
        (size_t)Inspector::Protocol::Automation::ErrorMessage::MissingParameter,
        (size_t)Inspector::Protocol::Automation::ErrorMessage::InvalidParameter,
    };
    for (size_t i = 0; i < 11; ++i)
        if (protocolString == enum_constant_values[constantValues[i]])
            return (Inspector::Protocol::Automation::ErrorMessage)constantValues[i];

    return Nullopt;
}

template<>
Optional<Inspector::Protocol::Automation::MouseInteraction> parseEnumValueFromString<Inspector::Protocol::Automation::MouseInteraction>(const String& protocolString)
{
    static const size_t constantValues[] = {
        (size_t)Inspector::Protocol::Automation::MouseInteraction::Move,
        (size_t)Inspector::Protocol::Automation::MouseInteraction::Down,
        (size_t)Inspector::Protocol::Automation::MouseInteraction::Up,
        (size_t)Inspector::Protocol::Automation::MouseInteraction::SingleClick,
        (size_t)Inspector::Protocol::Automation::MouseInteraction::DoubleClick,
    };
    for (size_t i = 0; i < 5; ++i)
        if (protocolString == enum_constant_values[constantValues[i]])
            return (Inspector::Protocol::Automation::MouseInteraction)constantValues[i];

    return Nullopt;
}

template<>
Optional<Inspector::Protocol::Automation::MouseButton> parseEnumValueFromString<Inspector::Protocol::Automation::MouseButton>(const String& protocolString)
{
    static const size_t constantValues[] = {
        (size_t)Inspector::Protocol::Automation::MouseButton::None,
        (size_t)Inspector::Protocol::Automation::MouseButton::Left,
        (size_t)Inspector::Protocol::Automation::MouseButton::Middle,
        (size_t)Inspector::Protocol::Automation::MouseButton::Right,
    };
    for (size_t i = 0; i < 4; ++i)
        if (protocolString == enum_constant_values[constantValues[i]])
            return (Inspector::Protocol::Automation::MouseButton)constantValues[i];

    return Nullopt;
}

template<>
Optional<Inspector::Protocol::Automation::KeyModifier> parseEnumValueFromString<Inspector::Protocol::Automation::KeyModifier>(const String& protocolString)
{
    static const size_t constantValues[] = {
        (size_t)Inspector::Protocol::Automation::KeyModifier::CapsLock,
        (size_t)Inspector::Protocol::Automation::KeyModifier::Control,
        (size_t)Inspector::Protocol::Automation::KeyModifier::Shift,
        (size_t)Inspector::Protocol::Automation::KeyModifier::Meta,
        (size_t)Inspector::Protocol::Automation::KeyModifier::Alt,
    };
    for (size_t i = 0; i < 5; ++i)
        if (protocolString == enum_constant_values[constantValues[i]])
            return (Inspector::Protocol::Automation::KeyModifier)constantValues[i];

    return Nullopt;
}

template<>
Optional<Inspector::Protocol::Automation::VirtualKey> parseEnumValueFromString<Inspector::Protocol::Automation::VirtualKey>(const String& protocolString)
{
    static const size_t constantValues[] = {
        (size_t)Inspector::Protocol::Automation::VirtualKey::Shift,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Control,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Alternate,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Meta,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Command,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Cancel,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Help,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Backspace,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Tab,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Clear,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Enter,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Pause,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Escape,
        (size_t)Inspector::Protocol::Automation::VirtualKey::PageUp,
        (size_t)Inspector::Protocol::Automation::VirtualKey::PageDown,
        (size_t)Inspector::Protocol::Automation::VirtualKey::End,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Home,
        (size_t)Inspector::Protocol::Automation::VirtualKey::LeftArrow,
        (size_t)Inspector::Protocol::Automation::VirtualKey::UpArrow,
        (size_t)Inspector::Protocol::Automation::VirtualKey::RightArrow,
        (size_t)Inspector::Protocol::Automation::VirtualKey::DownArrow,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Insert,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Delete,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Space,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Semicolon,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Equals,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Return,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPad0,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPad1,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPad2,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPad3,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPad4,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPad5,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPad6,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPad7,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPad8,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPad9,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPadMultiply,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPadAdd,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPadSeparator,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPadSubtract,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPadDecimal,
        (size_t)Inspector::Protocol::Automation::VirtualKey::NumberPadDivide,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Function1,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Function2,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Function3,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Function4,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Function5,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Function6,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Function7,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Function8,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Function9,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Function10,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Function11,
        (size_t)Inspector::Protocol::Automation::VirtualKey::Function12,
    };
    for (size_t i = 0; i < 55; ++i)
        if (protocolString == enum_constant_values[constantValues[i]])
            return (Inspector::Protocol::Automation::VirtualKey)constantValues[i];

    return Nullopt;
}

template<>
Optional<Inspector::Protocol::Automation::KeyboardInteractionType> parseEnumValueFromString<Inspector::Protocol::Automation::KeyboardInteractionType>(const String& protocolString)
{
    static const size_t constantValues[] = {
        (size_t)Inspector::Protocol::Automation::KeyboardInteractionType::KeyPress,
        (size_t)Inspector::Protocol::Automation::KeyboardInteractionType::KeyRelease,
        (size_t)Inspector::Protocol::Automation::KeyboardInteractionType::InsertByKey,
    };
    for (size_t i = 0; i < 3; ++i)
        if (protocolString == enum_constant_values[constantValues[i]])
            return (Inspector::Protocol::Automation::KeyboardInteractionType)constantValues[i];

    return Nullopt;
}


} // namespace AutomationHelpers



} // namespace Protocol

} // namespace Inspector
