/*
 * Copyright (C) 2013 Google Inc. All rights reserved.
 * Copyright (C) 2013-2016 Apple Inc. All rights reserved.
 * Copyright (C) 2014 University of Washington. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

// DO NOT EDIT THIS FILE. It is automatically generated from Automation.json
// by the script: Source/JavaScriptCore/inspector/scripts/generate-inspector-protocol-bindings.py

#include "config.h"
#include "AutomationBackendDispatchers.h"

#include <inspector/InspectorFrontendRouter.h>
#include <inspector/InspectorValues.h>
#include <wtf/NeverDestroyed.h>
#include <wtf/text/CString.h>

namespace Inspector {

AutomationBackendDispatcherHandler::~AutomationBackendDispatcherHandler() { }

Ref<AutomationBackendDispatcher> AutomationBackendDispatcher::create(BackendDispatcher& backendDispatcher, AutomationBackendDispatcherHandler* agent)
{
    return adoptRef(*new AutomationBackendDispatcher(backendDispatcher, agent));
}

AutomationBackendDispatcher::AutomationBackendDispatcher(BackendDispatcher& backendDispatcher, AutomationBackendDispatcherHandler* agent)
    : SupplementalBackendDispatcher(backendDispatcher)
    , m_agent(agent)
{
    m_backendDispatcher->registerDispatcherForDomain(ASCIILiteral("Automation"), this);
}

void AutomationBackendDispatcher::dispatch(long requestId, const String& method, Ref<InspectorObject>&& message)
{
    Ref<AutomationBackendDispatcher> protect(*this);

    RefPtr<InspectorObject> parameters;
    message->getObject(ASCIILiteral("params"), parameters);

    typedef void (AutomationBackendDispatcher::*CallHandler)(long requestId, RefPtr<InspectorObject>&& message);
    typedef HashMap<String, CallHandler> DispatchMap;
    static NeverDestroyed<DispatchMap> dispatchMap;
    if (dispatchMap.get().isEmpty()) {
        static const struct MethodTable {
            const char* name;
            CallHandler handler;
        } commands[] = {
            { "getBrowsingContexts", &AutomationBackendDispatcher::getBrowsingContexts },
            { "getBrowsingContext", &AutomationBackendDispatcher::getBrowsingContext },
            { "createBrowsingContext", &AutomationBackendDispatcher::createBrowsingContext },
            { "closeBrowsingContext", &AutomationBackendDispatcher::closeBrowsingContext },
            { "switchToBrowsingContext", &AutomationBackendDispatcher::switchToBrowsingContext },
            { "resizeWindowOfBrowsingContext", &AutomationBackendDispatcher::resizeWindowOfBrowsingContext },
            { "moveWindowOfBrowsingContext", &AutomationBackendDispatcher::moveWindowOfBrowsingContext },
            { "navigateBrowsingContext", &AutomationBackendDispatcher::navigateBrowsingContext },
            { "goBackInBrowsingContext", &AutomationBackendDispatcher::goBackInBrowsingContext },
            { "goForwardInBrowsingContext", &AutomationBackendDispatcher::goForwardInBrowsingContext },
            { "reloadBrowsingContext", &AutomationBackendDispatcher::reloadBrowsingContext },
            { "inspectBrowsingContext", &AutomationBackendDispatcher::inspectBrowsingContext },
            { "evaluateJavaScriptFunction", &AutomationBackendDispatcher::evaluateJavaScriptFunction },
            { "performMouseInteraction", &AutomationBackendDispatcher::performMouseInteraction },
            { "performKeyboardInteractions", &AutomationBackendDispatcher::performKeyboardInteractions },
            { "takeScreenshot", &AutomationBackendDispatcher::takeScreenshot },
            { "resolveChildFrameHandle", &AutomationBackendDispatcher::resolveChildFrameHandle },
            { "resolveParentFrameHandle", &AutomationBackendDispatcher::resolveParentFrameHandle },
            { "computeElementLayout", &AutomationBackendDispatcher::computeElementLayout },
            { "isShowingJavaScriptDialog", &AutomationBackendDispatcher::isShowingJavaScriptDialog },
            { "dismissCurrentJavaScriptDialog", &AutomationBackendDispatcher::dismissCurrentJavaScriptDialog },
            { "acceptCurrentJavaScriptDialog", &AutomationBackendDispatcher::acceptCurrentJavaScriptDialog },
            { "messageOfCurrentJavaScriptDialog", &AutomationBackendDispatcher::messageOfCurrentJavaScriptDialog },
            { "setUserInputForCurrentJavaScriptPrompt", &AutomationBackendDispatcher::setUserInputForCurrentJavaScriptPrompt },
            { "getAllCookies", &AutomationBackendDispatcher::getAllCookies },
            { "deleteSingleCookie", &AutomationBackendDispatcher::deleteSingleCookie },
            { "addSingleCookie", &AutomationBackendDispatcher::addSingleCookie },
            { "deleteAllCookies", &AutomationBackendDispatcher::deleteAllCookies },
        };
        size_t length = WTF_ARRAY_LENGTH(commands);
        for (size_t i = 0; i < length; ++i)
            dispatchMap.get().add(commands[i].name, commands[i].handler);
    }

    auto findResult = dispatchMap.get().find(method);
    if (findResult == dispatchMap.get().end()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::MethodNotFound, makeString('\'', "Automation", '.', method, "' was not found"));
        return;
    }

    ((*this).*findResult->value)(requestId, WTFMove(parameters));
}

void AutomationBackendDispatcher::getBrowsingContexts(long requestId, RefPtr<InspectorObject>&&)
{
    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    RefPtr<Inspector::Protocol::Array<Inspector::Protocol::Automation::BrowsingContext>> out_contexts;
    m_agent->getBrowsingContexts(error, out_contexts);

    if (!error.length())
        result->setArray(ASCIILiteral("contexts"), out_contexts);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

void AutomationBackendDispatcher::getBrowsingContext(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_handle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("handle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.getBrowsingContext"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    RefPtr<Inspector::Protocol::Automation::BrowsingContext> out_context;
    m_agent->getBrowsingContext(error, in_handle, out_context);

    if (!error.length())
        result->setObject(ASCIILiteral("context"), out_context);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

void AutomationBackendDispatcher::createBrowsingContext(long requestId, RefPtr<InspectorObject>&&)
{
    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Inspector::Protocol::Automation::BrowsingContextHandle out_handle;
    m_agent->createBrowsingContext(error, &out_handle);

    if (!error.length())
        result->setString(ASCIILiteral("handle"), out_handle);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

void AutomationBackendDispatcher::closeBrowsingContext(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_handle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("handle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.closeBrowsingContext"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    m_agent->closeBrowsingContext(error, in_handle);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

void AutomationBackendDispatcher::switchToBrowsingContext(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    bool opt_in_frameHandle_valueFound = false;
    String opt_in_frameHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("frameHandle"), &opt_in_frameHandle_valueFound);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.switchToBrowsingContext"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    m_agent->switchToBrowsingContext(error, in_browsingContextHandle, opt_in_frameHandle_valueFound ? &opt_in_frameHandle : nullptr);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

void AutomationBackendDispatcher::resizeWindowOfBrowsingContext(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_handle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("handle"), nullptr);
    RefPtr<Inspector::InspectorObject> in_size = m_backendDispatcher->getObject(parameters.get(), ASCIILiteral("size"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.resizeWindowOfBrowsingContext"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    m_agent->resizeWindowOfBrowsingContext(error, in_handle, *in_size);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

void AutomationBackendDispatcher::moveWindowOfBrowsingContext(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_handle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("handle"), nullptr);
    RefPtr<Inspector::InspectorObject> in_origin = m_backendDispatcher->getObject(parameters.get(), ASCIILiteral("origin"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.moveWindowOfBrowsingContext"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    m_agent->moveWindowOfBrowsingContext(error, in_handle, *in_origin);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

AutomationBackendDispatcherHandler::NavigateBrowsingContextCallback::NavigateBrowsingContextCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::NavigateBrowsingContextCallback::sendSuccess()
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();

    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::navigateBrowsingContext(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_handle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("handle"), nullptr);
    String in_url = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("url"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.navigateBrowsingContext"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::NavigateBrowsingContextCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::NavigateBrowsingContextCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->navigateBrowsingContext(error, in_handle, in_url, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

AutomationBackendDispatcherHandler::GoBackInBrowsingContextCallback::GoBackInBrowsingContextCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::GoBackInBrowsingContextCallback::sendSuccess()
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();

    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::goBackInBrowsingContext(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_handle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("handle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.goBackInBrowsingContext"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::GoBackInBrowsingContextCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::GoBackInBrowsingContextCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->goBackInBrowsingContext(error, in_handle, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

AutomationBackendDispatcherHandler::GoForwardInBrowsingContextCallback::GoForwardInBrowsingContextCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::GoForwardInBrowsingContextCallback::sendSuccess()
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();

    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::goForwardInBrowsingContext(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_handle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("handle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.goForwardInBrowsingContext"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::GoForwardInBrowsingContextCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::GoForwardInBrowsingContextCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->goForwardInBrowsingContext(error, in_handle, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

AutomationBackendDispatcherHandler::ReloadBrowsingContextCallback::ReloadBrowsingContextCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::ReloadBrowsingContextCallback::sendSuccess()
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();

    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::reloadBrowsingContext(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_handle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("handle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.reloadBrowsingContext"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::ReloadBrowsingContextCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::ReloadBrowsingContextCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->reloadBrowsingContext(error, in_handle, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

AutomationBackendDispatcherHandler::InspectBrowsingContextCallback::InspectBrowsingContextCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::InspectBrowsingContextCallback::sendSuccess()
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();

    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::inspectBrowsingContext(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_handle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("handle"), nullptr);
    bool opt_in_enableAutoCapturing_valueFound = false;
    bool opt_in_enableAutoCapturing = m_backendDispatcher->getBoolean(parameters.get(), ASCIILiteral("enableAutoCapturing"), &opt_in_enableAutoCapturing_valueFound);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.inspectBrowsingContext"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::InspectBrowsingContextCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::InspectBrowsingContextCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->inspectBrowsingContext(error, in_handle, opt_in_enableAutoCapturing_valueFound ? &opt_in_enableAutoCapturing : nullptr, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::EvaluateJavaScriptFunctionCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::sendSuccess(const String& result)
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("result"), result);
    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::evaluateJavaScriptFunction(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    bool opt_in_frameHandle_valueFound = false;
    String opt_in_frameHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("frameHandle"), &opt_in_frameHandle_valueFound);
    String in_function = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("function"), nullptr);
    RefPtr<Inspector::InspectorArray> in_arguments = m_backendDispatcher->getArray(parameters.get(), ASCIILiteral("arguments"), nullptr);
    bool opt_in_expectsImplicitCallbackArgument_valueFound = false;
    bool opt_in_expectsImplicitCallbackArgument = m_backendDispatcher->getBoolean(parameters.get(), ASCIILiteral("expectsImplicitCallbackArgument"), &opt_in_expectsImplicitCallbackArgument_valueFound);
    bool opt_in_callbackTimeout_valueFound = false;
    int opt_in_callbackTimeout = m_backendDispatcher->getInteger(parameters.get(), ASCIILiteral("callbackTimeout"), &opt_in_callbackTimeout_valueFound);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.evaluateJavaScriptFunction"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->evaluateJavaScriptFunction(error, in_browsingContextHandle, opt_in_frameHandle_valueFound ? &opt_in_frameHandle : nullptr, in_function, *in_arguments, opt_in_expectsImplicitCallbackArgument_valueFound ? &opt_in_expectsImplicitCallbackArgument : nullptr, opt_in_callbackTimeout_valueFound ? &opt_in_callbackTimeout : nullptr, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

void AutomationBackendDispatcher::performMouseInteraction(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_handle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("handle"), nullptr);
    RefPtr<Inspector::InspectorObject> in_position = m_backendDispatcher->getObject(parameters.get(), ASCIILiteral("position"), nullptr);
    String in_button = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("button"), nullptr);
    String in_interaction = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("interaction"), nullptr);
    RefPtr<Inspector::InspectorArray> in_modifiers = m_backendDispatcher->getArray(parameters.get(), ASCIILiteral("modifiers"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.performMouseInteraction"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    RefPtr<Inspector::Protocol::Automation::Point> out_position;
    m_agent->performMouseInteraction(error, in_handle, *in_position, in_button, in_interaction, *in_modifiers, out_position);

    if (!error.length())
        result->setObject(ASCIILiteral("position"), out_position);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback::PerformKeyboardInteractionsCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback::sendSuccess()
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();

    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::performKeyboardInteractions(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_handle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("handle"), nullptr);
    RefPtr<Inspector::InspectorArray> in_interactions = m_backendDispatcher->getArray(parameters.get(), ASCIILiteral("interactions"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.performKeyboardInteractions"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->performKeyboardInteractions(error, in_handle, *in_interactions, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

AutomationBackendDispatcherHandler::TakeScreenshotCallback::TakeScreenshotCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::TakeScreenshotCallback::sendSuccess(const String& data)
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("data"), data);
    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::takeScreenshot(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_handle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("handle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.takeScreenshot"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::TakeScreenshotCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::TakeScreenshotCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->takeScreenshot(error, in_handle, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback::ResolveChildFrameHandleCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback::sendSuccess(const String& result)
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("result"), result);
    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::resolveChildFrameHandle(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    bool opt_in_frameHandle_valueFound = false;
    String opt_in_frameHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("frameHandle"), &opt_in_frameHandle_valueFound);
    bool opt_in_ordinal_valueFound = false;
    int opt_in_ordinal = m_backendDispatcher->getInteger(parameters.get(), ASCIILiteral("ordinal"), &opt_in_ordinal_valueFound);
    bool opt_in_name_valueFound = false;
    String opt_in_name = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("name"), &opt_in_name_valueFound);
    bool opt_in_nodeHandle_valueFound = false;
    String opt_in_nodeHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("nodeHandle"), &opt_in_nodeHandle_valueFound);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.resolveChildFrameHandle"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->resolveChildFrameHandle(error, in_browsingContextHandle, opt_in_frameHandle_valueFound ? &opt_in_frameHandle : nullptr, opt_in_ordinal_valueFound ? &opt_in_ordinal : nullptr, opt_in_name_valueFound ? &opt_in_name : nullptr, opt_in_nodeHandle_valueFound ? &opt_in_nodeHandle : nullptr, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback::ResolveParentFrameHandleCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback::sendSuccess(const String& result)
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("result"), result);
    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::resolveParentFrameHandle(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    String in_frameHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("frameHandle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.resolveParentFrameHandle"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->resolveParentFrameHandle(error, in_browsingContextHandle, in_frameHandle, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

AutomationBackendDispatcherHandler::ComputeElementLayoutCallback::ComputeElementLayoutCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::ComputeElementLayoutCallback::sendSuccess(RefPtr<Inspector::Protocol::Automation::Rect>&& rect)
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setObject(ASCIILiteral("rect"), rect);
    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::computeElementLayout(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    String in_frameHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("frameHandle"), nullptr);
    String in_nodeHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("nodeHandle"), nullptr);
    bool opt_in_scrollIntoViewIfNeeded_valueFound = false;
    bool opt_in_scrollIntoViewIfNeeded = m_backendDispatcher->getBoolean(parameters.get(), ASCIILiteral("scrollIntoViewIfNeeded"), &opt_in_scrollIntoViewIfNeeded_valueFound);
    bool opt_in_useViewportCoordinates_valueFound = false;
    bool opt_in_useViewportCoordinates = m_backendDispatcher->getBoolean(parameters.get(), ASCIILiteral("useViewportCoordinates"), &opt_in_useViewportCoordinates_valueFound);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.computeElementLayout"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::ComputeElementLayoutCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::ComputeElementLayoutCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->computeElementLayout(error, in_browsingContextHandle, in_frameHandle, in_nodeHandle, opt_in_scrollIntoViewIfNeeded_valueFound ? &opt_in_scrollIntoViewIfNeeded : nullptr, opt_in_useViewportCoordinates_valueFound ? &opt_in_useViewportCoordinates : nullptr, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

void AutomationBackendDispatcher::isShowingJavaScriptDialog(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.isShowingJavaScriptDialog"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    bool out_result;
    m_agent->isShowingJavaScriptDialog(error, in_browsingContextHandle, &out_result);

    if (!error.length())
        result->setBoolean(ASCIILiteral("result"), out_result);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

void AutomationBackendDispatcher::dismissCurrentJavaScriptDialog(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.dismissCurrentJavaScriptDialog"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    m_agent->dismissCurrentJavaScriptDialog(error, in_browsingContextHandle);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

void AutomationBackendDispatcher::acceptCurrentJavaScriptDialog(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.acceptCurrentJavaScriptDialog"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    m_agent->acceptCurrentJavaScriptDialog(error, in_browsingContextHandle);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

void AutomationBackendDispatcher::messageOfCurrentJavaScriptDialog(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.messageOfCurrentJavaScriptDialog"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    String out_message;
    m_agent->messageOfCurrentJavaScriptDialog(error, in_browsingContextHandle, &out_message);

    if (!error.length())
        result->setString(ASCIILiteral("message"), out_message);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

void AutomationBackendDispatcher::setUserInputForCurrentJavaScriptPrompt(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    String in_userInput = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("userInput"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.setUserInputForCurrentJavaScriptPrompt"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    m_agent->setUserInputForCurrentJavaScriptPrompt(error, in_browsingContextHandle, in_userInput);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

AutomationBackendDispatcherHandler::GetAllCookiesCallback::GetAllCookiesCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::GetAllCookiesCallback::sendSuccess(RefPtr<Inspector::Protocol::Array<Inspector::Protocol::Automation::Cookie>>&& cookies)
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setArray(ASCIILiteral("cookies"), cookies);
    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::getAllCookies(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.getAllCookies"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::GetAllCookiesCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::GetAllCookiesCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->getAllCookies(error, in_browsingContextHandle, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

AutomationBackendDispatcherHandler::DeleteSingleCookieCallback::DeleteSingleCookieCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::DeleteSingleCookieCallback::sendSuccess()
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();

    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::deleteSingleCookie(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    String in_cookieName = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("cookieName"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.deleteSingleCookie"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::DeleteSingleCookieCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::DeleteSingleCookieCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->deleteSingleCookie(error, in_browsingContextHandle, in_cookieName, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

AutomationBackendDispatcherHandler::AddSingleCookieCallback::AddSingleCookieCallback(Ref<BackendDispatcher>&& backendDispatcher, int id) : BackendDispatcher::CallbackBase(WTFMove(backendDispatcher), id) { }

void AutomationBackendDispatcherHandler::AddSingleCookieCallback::sendSuccess()
{
    Ref<InspectorObject> jsonMessage = InspectorObject::create();

    CallbackBase::sendSuccess(WTFMove(jsonMessage));
}

void AutomationBackendDispatcher::addSingleCookie(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    RefPtr<Inspector::InspectorObject> in_cookie = m_backendDispatcher->getObject(parameters.get(), ASCIILiteral("cookie"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.addSingleCookie"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    Ref<AutomationBackendDispatcherHandler::AddSingleCookieCallback> callback = adoptRef(*new AutomationBackendDispatcherHandler::AddSingleCookieCallback(m_backendDispatcher.copyRef(), requestId));
    m_agent->addSingleCookie(error, in_browsingContextHandle, *in_cookie, callback.copyRef());

    if (error.length()) {
        callback->disable();
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, error);
        return;
    }
}

void AutomationBackendDispatcher::deleteAllCookies(long requestId, RefPtr<InspectorObject>&& parameters)
{
    String in_browsingContextHandle = m_backendDispatcher->getString(parameters.get(), ASCIILiteral("browsingContextHandle"), nullptr);
    if (m_backendDispatcher->hasProtocolErrors()) {
        m_backendDispatcher->reportProtocolError(BackendDispatcher::InvalidParams, String::format("Some arguments of method '%s' can't be processed", "Automation.deleteAllCookies"));
        return;
    }

    ErrorString error;
    Ref<InspectorObject> result = InspectorObject::create();
    m_agent->deleteAllCookies(error, in_browsingContextHandle);

    if (!error.length())
        m_backendDispatcher->sendResponse(requestId, WTFMove(result));
    else
        m_backendDispatcher->reportProtocolError(BackendDispatcher::ServerError, WTFMove(error));
}

} // namespace Inspector
