/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSAbstractView.h"

#include "JSDOMBinding.h"
#include "JSDocument.h"
#include "JSStyleMedia.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsAbstractViewDocument(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsAbstractViewStyleMedia(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSAbstractViewConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSAbstractViewPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSAbstractViewPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSAbstractViewPrototype* ptr = new (NotNull, JSC::allocateCell<JSAbstractViewPrototype>(vm.heap)) JSAbstractViewPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSAbstractViewPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSAbstractViewPrototypeTableValues[] =
{
    { "document", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAbstractViewDocument), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "styleMedia", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAbstractViewStyleMedia), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSAbstractViewPrototype::s_info = { "AbstractViewPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSAbstractViewPrototype) };

void JSAbstractViewPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSAbstractViewPrototypeTableValues, *this);
}

const ClassInfo JSAbstractView::s_info = { "AbstractView", &Base::s_info, 0, CREATE_METHOD_TABLE(JSAbstractView) };

JSAbstractView::JSAbstractView(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DOMWindow>&& impl)
    : JSDOMWrapper<DOMWindow>(structure, globalObject, WTFMove(impl))
{
}

JSObject* JSAbstractView::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSAbstractViewPrototype::create(vm, globalObject, JSAbstractViewPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSAbstractView::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAbstractView>(vm, globalObject);
}

void JSAbstractView::destroy(JSC::JSCell* cell)
{
    JSAbstractView* thisObject = static_cast<JSAbstractView*>(cell);
    thisObject->JSAbstractView::~JSAbstractView();
}

EncodedJSValue jsAbstractViewDocument(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSAbstractView*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "AbstractView", "document");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = toJS(state, castedThis->globalObject(), impl.document());
    return JSValue::encode(result);
}


EncodedJSValue jsAbstractViewStyleMedia(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSAbstractView*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "AbstractView", "styleMedia");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = toJS(state, castedThis->globalObject(), impl.styleMedia());
    return JSValue::encode(result);
}


bool setJSAbstractViewConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    JSAbstractViewPrototype* domObject = jsDynamicCast<JSAbstractViewPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

bool JSAbstractViewOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSAbstractViewOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsAbstractView = jsCast<JSAbstractView*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsAbstractView->wrapped(), jsAbstractView);
}

DOMWindow* JSAbstractView::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSAbstractView*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
