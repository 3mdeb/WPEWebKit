/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FETCH_API)

#include "JSFetchResponse.h"

#include "Dictionary.h"
#include "ExceptionCode.h"
#include "FetchResponse.h"
#include "FetchResponseBuiltins.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDOMPromise.h"
#include "JSFetchHeaders.h"
#include "JSFetchResponse.h"
#include "RuntimeEnabledFeatures.h"
#include "URL.h"
#include "WebCoreJSClientData.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<typename T> Optional<T> parse(ExecState&, JSValue);
template<typename T> const char* expectedEnumerationValues();

JSString* jsStringWithCache(ExecState*, FetchResponse::Type);

JSString* jsStringWithCache(ExecState* state, FetchResponse::Type enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("basic"),
        ASCIILiteral("cors"),
        ASCIILiteral("default"),
        ASCIILiteral("error"),
        ASCIILiteral("opaque"),
        ASCIILiteral("opaqueredirect"),
    };
    static_assert(static_cast<size_t>(FetchResponse::Type::Basic) == 0, "FetchResponse::Type::Basic is not 0 as expected");
    static_assert(static_cast<size_t>(FetchResponse::Type::Cors) == 1, "FetchResponse::Type::Cors is not 1 as expected");
    static_assert(static_cast<size_t>(FetchResponse::Type::Default) == 2, "FetchResponse::Type::Default is not 2 as expected");
    static_assert(static_cast<size_t>(FetchResponse::Type::Error) == 3, "FetchResponse::Type::Error is not 3 as expected");
    static_assert(static_cast<size_t>(FetchResponse::Type::Opaque) == 4, "FetchResponse::Type::Opaque is not 4 as expected");
    static_assert(static_cast<size_t>(FetchResponse::Type::Opaqueredirect) == 5, "FetchResponse::Type::Opaqueredirect is not 5 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(state, values[static_cast<size_t>(enumerationValue)]);
}

template<> struct JSValueTraits<FetchResponse::Type> {
    static JSString* arrayJSValue(ExecState* state, JSDOMGlobalObject*, FetchResponse::Type value) { return jsStringWithCache(state, value); }
};

template<> Optional<FetchResponse::Type> parse<FetchResponse::Type>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "basic")
        return FetchResponse::Type::Basic;
    if (stringValue == "cors")
        return FetchResponse::Type::Cors;
    if (stringValue == "default")
        return FetchResponse::Type::Default;
    if (stringValue == "error")
        return FetchResponse::Type::Error;
    if (stringValue == "opaque")
        return FetchResponse::Type::Opaque;
    if (stringValue == "opaqueredirect")
        return FetchResponse::Type::Opaqueredirect;
    return Nullopt;
}

template<> FetchResponse::Type convert<FetchResponse::Type>(ExecState& state, JSValue value)
{
    auto result = parse<FetchResponse::Type>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state);
        return { };
    }
    return result.value();
}

template<> inline const char* expectedEnumerationValues<FetchResponse::Type>()
{
    return "\"basic\", \"cors\", \"default\", \"error\", \"opaque\", \"opaqueredirect\"";
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponseConstructorFunctionError(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponseConstructorFunctionRedirect(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionClone(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionInitializeWith(JSC::ExecState*);
#if ENABLE(FETCH_API)
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionArrayBuffer(JSC::ExecState*);
#endif
#if ENABLE(FETCH_API)
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionBlob(JSC::ExecState*);
#endif
#if ENABLE(FETCH_API)
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionFormData(JSC::ExecState*);
#endif
#if ENABLE(FETCH_API)
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionJson(JSC::ExecState*);
#endif
#if ENABLE(FETCH_API)
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionText(JSC::ExecState*);
#endif

// Attributes

JSC::EncodedJSValue jsFetchResponseType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseUrl(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseRedirected(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseStatus(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseOk(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseStatusText(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseHeaders(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseBody(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#if ENABLE(FETCH_API)
JSC::EncodedJSValue jsFetchResponseBodyUsed(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
JSC::EncodedJSValue jsFetchResponseConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFetchResponseConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSFetchResponsePrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSFetchResponsePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSFetchResponsePrototype* ptr = new (NotNull, JSC::allocateCell<JSFetchResponsePrototype>(vm.heap)) JSFetchResponsePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSFetchResponsePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

typedef JSBuiltinConstructor<JSFetchResponse> JSFetchResponseConstructor;

/* Hash table for constructor */

static const HashTableValue JSFetchResponseConstructorTableValues[] =
{
    { "error", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchResponseConstructorFunctionError), (intptr_t) (0) } },
    { "redirect", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchResponseConstructorFunctionRedirect), (intptr_t) (1) } },
};

template<> JSValue JSFetchResponseConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSFetchResponseConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSFetchResponse::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Response"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSFetchResponseConstructorTableValues, *this);
}

template<> FunctionExecutable* JSFetchResponseConstructor::initializeExecutable(VM& vm)
{
    return fetchResponseInitializeFetchResponseCodeGenerator(vm);
}

template<> const ClassInfo JSFetchResponseConstructor::s_info = { "Response", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFetchResponseConstructor) };

/* Hash table for prototype */

static const HashTableValue JSFetchResponsePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFetchResponseConstructor) } },
    { "type", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "url", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseUrl), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "redirected", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseRedirected), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "status", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseStatus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "ok", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseOk), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "statusText", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseStatusText), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "headers", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseHeaders), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "body", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseBody), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#if ENABLE(FETCH_API)
    { "bodyUsed", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseBodyUsed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "clone", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchResponsePrototypeFunctionClone), (intptr_t) (0) } },
#if ENABLE(FETCH_API)
    { "arrayBuffer", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchResponsePrototypeFunctionArrayBuffer), (intptr_t) (0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(FETCH_API)
    { "blob", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchResponsePrototypeFunctionBlob), (intptr_t) (0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(FETCH_API)
    { "formData", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchResponsePrototypeFunctionFormData), (intptr_t) (0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(FETCH_API)
    { "json", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchResponsePrototypeFunctionJson), (intptr_t) (0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(FETCH_API)
    { "text", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchResponsePrototypeFunctionText), (intptr_t) (0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
};

const ClassInfo JSFetchResponsePrototype::s_info = { "ResponsePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFetchResponsePrototype) };

void JSFetchResponsePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSFetchResponsePrototypeTableValues, *this);
#if ENABLE(FETCH_API)
    if (!RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("arrayBuffer"), strlen("arrayBuffer"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
#endif
#if ENABLE(FETCH_API)
    if (!RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("blob"), strlen("blob"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
#endif
#if ENABLE(FETCH_API)
    if (!RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("formData"), strlen("formData"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
#endif
#if ENABLE(FETCH_API)
    if (!RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("json"), strlen("json"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
#endif
#if ENABLE(FETCH_API)
    if (!RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("text"), strlen("text"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
#endif
#if ENABLE(FETCH_API)
    if (!RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("bodyUsed"), strlen("bodyUsed"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
#endif
    JSVMClientData& clientData = *static_cast<JSVMClientData*>(vm.clientData);
    putDirect(vm, clientData.builtinNames().initializeWithPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchResponsePrototypeFunctionInitializeWith), ReadOnly | DontEnum);
}

const ClassInfo JSFetchResponse::s_info = { "Response", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFetchResponse) };

JSFetchResponse::JSFetchResponse(Structure* structure, JSDOMGlobalObject& globalObject, Ref<FetchResponse>&& impl)
    : JSDOMWrapper<FetchResponse>(structure, globalObject, WTFMove(impl))
{
}

JSObject* JSFetchResponse::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSFetchResponsePrototype::create(vm, globalObject, JSFetchResponsePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSFetchResponse::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFetchResponse>(vm, globalObject);
}

void JSFetchResponse::destroy(JSC::JSCell* cell)
{
    JSFetchResponse* thisObject = static_cast<JSFetchResponse*>(cell);
    thisObject->JSFetchResponse::~JSFetchResponse();
}

EncodedJSValue jsFetchResponseType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSFetchResponse*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "FetchResponse", "type");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsStringWithCache(state, impl.type());
    return JSValue::encode(result);
}


EncodedJSValue jsFetchResponseUrl(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSFetchResponse*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "FetchResponse", "url");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsStringWithCache(state, impl.url());
    return JSValue::encode(result);
}


EncodedJSValue jsFetchResponseRedirected(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSFetchResponse*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "FetchResponse", "redirected");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsBoolean(impl.redirected());
    return JSValue::encode(result);
}


EncodedJSValue jsFetchResponseStatus(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSFetchResponse*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "FetchResponse", "status");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.status());
    return JSValue::encode(result);
}


EncodedJSValue jsFetchResponseOk(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSFetchResponse*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "FetchResponse", "ok");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsBoolean(impl.ok());
    return JSValue::encode(result);
}


EncodedJSValue jsFetchResponseStatusText(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSFetchResponse*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "FetchResponse", "statusText");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsStringWithCache(state, impl.statusText());
    return JSValue::encode(result);
}


EncodedJSValue jsFetchResponseHeaders(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSFetchResponse*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "FetchResponse", "headers");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = toJS(state, castedThis->globalObject(), impl.headers());
    return JSValue::encode(result);
}


EncodedJSValue jsFetchResponseBody(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSFetchResponse*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "FetchResponse", "body");
    }
    return JSValue::encode(castedThis->body(*state));
}


#if ENABLE(FETCH_API)
EncodedJSValue jsFetchResponseBodyUsed(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSFetchResponse*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "FetchResponse", "bodyUsed");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsBoolean(impl.isDisturbed());
    return JSValue::encode(result);
}

#endif

EncodedJSValue jsFetchResponseConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    JSFetchResponsePrototype* domObject = jsDynamicCast<JSFetchResponsePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state);
    return JSValue::encode(JSFetchResponse::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSFetchResponseConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    JSFetchResponsePrototype* domObject = jsDynamicCast<JSFetchResponsePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSFetchResponse::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSFetchResponseConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsFetchResponseConstructorFunctionError(ExecState* state)
{
    auto* context = jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject())->scriptExecutionContext();
    if (!context)
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(state, jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), FetchResponse::error(*context));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsFetchResponseConstructorFunctionRedirect(ExecState* state)
{
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    ExceptionCode ec = 0;
    auto* context = jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject())->scriptExecutionContext();
    if (!context)
        return JSValue::encode(jsUndefined());
    auto url = state->argument(0).toWTFString(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    auto status = state->argument(1).isUndefined() ? 302 : convert<uint16_t>(*state, state->uncheckedArgument(1), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = toJS(state, jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), FetchResponse::redirect(*context, WTFMove(url), WTFMove(status), ec));

    setDOMException(state, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionClone(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    auto castedThis = jsDynamicCast<JSFetchResponse*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "FetchResponse", "clone");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFetchResponse::info());
    auto& impl = castedThis->wrapped();
    ExceptionCode ec = 0;
    auto* context = jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject())->scriptExecutionContext();
    if (!context)
        return JSValue::encode(jsUndefined());
    JSValue result = toJSNewlyCreated(state, castedThis->globalObject(), impl.clone(*context, ec));

    setDOMException(state, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionInitializeWith(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    auto castedThis = jsDynamicCast<JSFetchResponse*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "FetchResponse", "initializeWith");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFetchResponse::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    ExceptionCode ec = 0;
    auto parameters = Dictionary(state, state->argument(0));
    impl.initializeWith(WTFMove(parameters), ec);
    setDOMException(state, ec);
    return JSValue::encode(jsUndefined());
}

#if ENABLE(FETCH_API)
static EncodedJSValue jsFetchResponsePrototypeFunctionArrayBufferPromise(ExecState*, JSPromiseDeferred*);
EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionArrayBuffer(ExecState* state)
{
    return JSValue::encode(callPromiseFunction(*state, jsFetchResponsePrototypeFunctionArrayBufferPromise));
}

static inline EncodedJSValue jsFetchResponsePrototypeFunctionArrayBufferPromise(ExecState* state, JSPromiseDeferred* promiseDeferred)
{
    JSValue thisValue = state->thisValue();
    auto castedThis = jsDynamicCast<JSFetchResponse*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "FetchResponse", "arrayBuffer");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFetchResponse::info());
    auto& impl = castedThis->wrapped();
    impl.arrayBuffer(DeferredWrapper(state, castedThis->globalObject(), promiseDeferred));
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(FETCH_API)
static EncodedJSValue jsFetchResponsePrototypeFunctionBlobPromise(ExecState*, JSPromiseDeferred*);
EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionBlob(ExecState* state)
{
    return JSValue::encode(callPromiseFunction(*state, jsFetchResponsePrototypeFunctionBlobPromise));
}

static inline EncodedJSValue jsFetchResponsePrototypeFunctionBlobPromise(ExecState* state, JSPromiseDeferred* promiseDeferred)
{
    JSValue thisValue = state->thisValue();
    auto castedThis = jsDynamicCast<JSFetchResponse*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "FetchResponse", "blob");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFetchResponse::info());
    auto& impl = castedThis->wrapped();
    impl.blob(DeferredWrapper(state, castedThis->globalObject(), promiseDeferred));
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(FETCH_API)
static EncodedJSValue jsFetchResponsePrototypeFunctionFormDataPromise(ExecState*, JSPromiseDeferred*);
EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionFormData(ExecState* state)
{
    return JSValue::encode(callPromiseFunction(*state, jsFetchResponsePrototypeFunctionFormDataPromise));
}

static inline EncodedJSValue jsFetchResponsePrototypeFunctionFormDataPromise(ExecState* state, JSPromiseDeferred* promiseDeferred)
{
    JSValue thisValue = state->thisValue();
    auto castedThis = jsDynamicCast<JSFetchResponse*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "FetchResponse", "formData");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFetchResponse::info());
    auto& impl = castedThis->wrapped();
    impl.formData(DeferredWrapper(state, castedThis->globalObject(), promiseDeferred));
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(FETCH_API)
static EncodedJSValue jsFetchResponsePrototypeFunctionJsonPromise(ExecState*, JSPromiseDeferred*);
EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionJson(ExecState* state)
{
    return JSValue::encode(callPromiseFunction(*state, jsFetchResponsePrototypeFunctionJsonPromise));
}

static inline EncodedJSValue jsFetchResponsePrototypeFunctionJsonPromise(ExecState* state, JSPromiseDeferred* promiseDeferred)
{
    JSValue thisValue = state->thisValue();
    auto castedThis = jsDynamicCast<JSFetchResponse*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "FetchResponse", "json");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFetchResponse::info());
    auto& impl = castedThis->wrapped();
    impl.json(DeferredWrapper(state, castedThis->globalObject(), promiseDeferred));
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(FETCH_API)
static EncodedJSValue jsFetchResponsePrototypeFunctionTextPromise(ExecState*, JSPromiseDeferred*);
EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionText(ExecState* state)
{
    return JSValue::encode(callPromiseFunction(*state, jsFetchResponsePrototypeFunctionTextPromise));
}

static inline EncodedJSValue jsFetchResponsePrototypeFunctionTextPromise(ExecState* state, JSPromiseDeferred* promiseDeferred)
{
    JSValue thisValue = state->thisValue();
    auto castedThis = jsDynamicCast<JSFetchResponse*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "FetchResponse", "text");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSFetchResponse::info());
    auto& impl = castedThis->wrapped();
    impl.text(DeferredWrapper(state, castedThis->globalObject(), promiseDeferred));
    return JSValue::encode(jsUndefined());
}

#endif

void JSFetchResponse::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSFetchResponse*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    visitor.append(&thisObject->m_body);
}

bool JSFetchResponseOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsFetchResponse = jsCast<JSFetchResponse*>(handle.slot()->asCell());
    if (jsFetchResponse->wrapped().hasPendingActivity())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSFetchResponseOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsFetchResponse = jsCast<JSFetchResponse*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsFetchResponse->wrapped(), jsFetchResponse);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7FetchResponse@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore13FetchResponseE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<FetchResponse>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7FetchResponse@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore13FetchResponseE[2];
#if COMPILER(CLANG)
    // If this fails FetchResponse does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(FetchResponse), "FetchResponse is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // FetchResponse has subclasses. If FetchResponse has subclasses that get passed
    // to toJS() we currently require FetchResponse you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<JSFetchResponse, FetchResponse>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, FetchResponse& impl)
{
    return wrap(state, globalObject, impl);
}

FetchResponse* JSFetchResponse::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSFetchResponse*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(FETCH_API)
