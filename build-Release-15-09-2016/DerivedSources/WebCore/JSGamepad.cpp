/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(GAMEPAD)

#include "JSGamepad.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSGamepadButton.h"
#include "URL.h"
#include <runtime/FunctionPrototype.h>
#include <runtime/JSArray.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsGamepadId(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadIndex(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadConnected(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadTimestamp(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadMapping(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadAxes(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadButtons(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGamepadConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSGamepadConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSGamepadPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSGamepadPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSGamepadPrototype* ptr = new (NotNull, JSC::allocateCell<JSGamepadPrototype>(vm.heap)) JSGamepadPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSGamepadPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

typedef JSDOMConstructorNotConstructable<JSGamepad> JSGamepadConstructor;

template<> JSValue JSGamepadConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSGamepadConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSGamepad::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Gamepad"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSGamepadConstructor::s_info = { "Gamepad", &Base::s_info, 0, CREATE_METHOD_TABLE(JSGamepadConstructor) };

/* Hash table for prototype */

static const HashTableValue JSGamepadPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSGamepadConstructor) } },
    { "id", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadId), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "index", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadIndex), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "connected", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadConnected), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "timestamp", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadTimestamp), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "mapping", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadMapping), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "axes", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadAxes), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "buttons", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGamepadButtons), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSGamepadPrototype::s_info = { "GamepadPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSGamepadPrototype) };

void JSGamepadPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSGamepadPrototypeTableValues, *this);
}

const ClassInfo JSGamepad::s_info = { "Gamepad", &Base::s_info, 0, CREATE_METHOD_TABLE(JSGamepad) };

JSGamepad::JSGamepad(Structure* structure, JSDOMGlobalObject& globalObject, Ref<Gamepad>&& impl)
    : JSDOMWrapper<Gamepad>(structure, globalObject, WTFMove(impl))
{
}

JSObject* JSGamepad::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSGamepadPrototype::create(vm, globalObject, JSGamepadPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSGamepad::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSGamepad>(vm, globalObject);
}

void JSGamepad::destroy(JSC::JSCell* cell)
{
    JSGamepad* thisObject = static_cast<JSGamepad*>(cell);
    thisObject->JSGamepad::~JSGamepad();
}

EncodedJSValue jsGamepadId(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSGamepad*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "Gamepad", "id");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsStringWithCache(state, impl.id());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadIndex(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSGamepad*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "Gamepad", "index");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.index());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadConnected(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSGamepad*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "Gamepad", "connected");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsBoolean(impl.connected());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadTimestamp(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSGamepad*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "Gamepad", "timestamp");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.timestamp());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadMapping(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSGamepad*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "Gamepad", "mapping");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsStringWithCache(state, impl.mapping());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadAxes(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSGamepad*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "Gamepad", "axes");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsArray(state, castedThis->globalObject(), impl.axes());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadButtons(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSGamepad*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "Gamepad", "buttons");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsArray(state, castedThis->globalObject(), impl.buttons());
    return JSValue::encode(result);
}


EncodedJSValue jsGamepadConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    JSGamepadPrototype* domObject = jsDynamicCast<JSGamepadPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state);
    return JSValue::encode(JSGamepad::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSGamepadConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    JSGamepadPrototype* domObject = jsDynamicCast<JSGamepadPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSGamepad::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSGamepadConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

bool JSGamepadOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSGamepadOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsGamepad = jsCast<JSGamepad*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsGamepad->wrapped(), jsGamepad);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<Gamepad>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to Gamepad.
    static_assert(!__is_polymorphic(Gamepad), "Gamepad is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<JSGamepad, Gamepad>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, Gamepad& impl)
{
    return wrap(state, globalObject, impl);
}

Gamepad* JSGamepad::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSGamepad*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(GAMEPAD)
