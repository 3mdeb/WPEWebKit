/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(ENCRYPTED_MEDIA) || ENABLE(ENCRYPTED_MEDIA_V2)

#include "JSMediaKeyError.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsMediaKeyErrorCode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#if ENABLE(ENCRYPTED_MEDIA_V2)
JSC::EncodedJSValue jsMediaKeyErrorSystemCode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
JSC::EncodedJSValue jsMediaKeyErrorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaKeyErrorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSMediaKeyErrorPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSMediaKeyErrorPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMediaKeyErrorPrototype* ptr = new (NotNull, JSC::allocateCell<JSMediaKeyErrorPrototype>(vm.heap)) JSMediaKeyErrorPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMediaKeyErrorPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

typedef JSDOMConstructorNotConstructable<JSMediaKeyError> JSMediaKeyErrorConstructor;

/* Hash table for constructor */

static const HashTableValue JSMediaKeyErrorConstructorTableValues[] =
{
    { "MEDIA_KEYERR_UNKNOWN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "MEDIA_KEYERR_CLIENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "MEDIA_KEYERR_SERVICE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "MEDIA_KEYERR_OUTPUT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4) } },
    { "MEDIA_KEYERR_HARDWARECHANGE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(5) } },
    { "MEDIA_KEYERR_DOMAIN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(6) } },
};

static_assert(MediaKeyError::MEDIA_KEYERR_UNKNOWN == 1, "MEDIA_KEYERR_UNKNOWN in MediaKeyError does not match value from IDL");
static_assert(MediaKeyError::MEDIA_KEYERR_CLIENT == 2, "MEDIA_KEYERR_CLIENT in MediaKeyError does not match value from IDL");
static_assert(MediaKeyError::MEDIA_KEYERR_SERVICE == 3, "MEDIA_KEYERR_SERVICE in MediaKeyError does not match value from IDL");
static_assert(MediaKeyError::MEDIA_KEYERR_OUTPUT == 4, "MEDIA_KEYERR_OUTPUT in MediaKeyError does not match value from IDL");
static_assert(MediaKeyError::MEDIA_KEYERR_HARDWARECHANGE == 5, "MEDIA_KEYERR_HARDWARECHANGE in MediaKeyError does not match value from IDL");
static_assert(MediaKeyError::MEDIA_KEYERR_DOMAIN == 6, "MEDIA_KEYERR_DOMAIN in MediaKeyError does not match value from IDL");

template<> JSValue JSMediaKeyErrorConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSMediaKeyErrorConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSMediaKeyError::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("WebKitMediaKeyError"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSMediaKeyErrorConstructorTableValues, *this);
}

template<> const ClassInfo JSMediaKeyErrorConstructor::s_info = { "WebKitMediaKeyError", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaKeyErrorConstructor) };

/* Hash table for prototype */

static const HashTableValue JSMediaKeyErrorPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaKeyErrorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaKeyErrorConstructor) } },
    { "code", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaKeyErrorCode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#if ENABLE(ENCRYPTED_MEDIA_V2)
    { "systemCode", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaKeyErrorSystemCode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "MEDIA_KEYERR_UNKNOWN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "MEDIA_KEYERR_CLIENT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "MEDIA_KEYERR_SERVICE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "MEDIA_KEYERR_OUTPUT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4) } },
    { "MEDIA_KEYERR_HARDWARECHANGE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(5) } },
    { "MEDIA_KEYERR_DOMAIN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(6) } },
};

const ClassInfo JSMediaKeyErrorPrototype::s_info = { "WebKitMediaKeyErrorPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaKeyErrorPrototype) };

void JSMediaKeyErrorPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMediaKeyErrorPrototypeTableValues, *this);
}

const ClassInfo JSMediaKeyError::s_info = { "WebKitMediaKeyError", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaKeyError) };

JSMediaKeyError::JSMediaKeyError(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MediaKeyError>&& impl)
    : JSDOMWrapper<MediaKeyError>(structure, globalObject, WTFMove(impl))
{
}

JSObject* JSMediaKeyError::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMediaKeyErrorPrototype::create(vm, globalObject, JSMediaKeyErrorPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSMediaKeyError::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaKeyError>(vm, globalObject);
}

void JSMediaKeyError::destroy(JSC::JSCell* cell)
{
    JSMediaKeyError* thisObject = static_cast<JSMediaKeyError*>(cell);
    thisObject->JSMediaKeyError::~JSMediaKeyError();
}

EncodedJSValue jsMediaKeyErrorCode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSMediaKeyError*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "WebKitMediaKeyError", "code");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.code());
    return JSValue::encode(result);
}


#if ENABLE(ENCRYPTED_MEDIA_V2)
EncodedJSValue jsMediaKeyErrorSystemCode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(thisValue);
    JSValue decodedThisValue = JSValue::decode(thisValue);
    auto* castedThis = jsDynamicCast<JSMediaKeyError*>(decodedThisValue);
    if (UNLIKELY(!castedThis)) {
        return throwGetterTypeError(*state, "WebKitMediaKeyError", "systemCode");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.systemCode());
    return JSValue::encode(result);
}

#endif

EncodedJSValue jsMediaKeyErrorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    JSMediaKeyErrorPrototype* domObject = jsDynamicCast<JSMediaKeyErrorPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state);
    return JSValue::encode(JSMediaKeyError::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSMediaKeyErrorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    JSMediaKeyErrorPrototype* domObject = jsDynamicCast<JSMediaKeyErrorPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSMediaKeyError::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMediaKeyErrorConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

bool JSMediaKeyErrorOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSMediaKeyErrorOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMediaKeyError = jsCast<JSMediaKeyError*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMediaKeyError->wrapped(), jsMediaKeyError);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<MediaKeyError>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to MediaKeyError.
    static_assert(!__is_polymorphic(MediaKeyError), "MediaKeyError is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<JSMediaKeyError, MediaKeyError>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, MediaKeyError& impl)
{
    return wrap(state, globalObject, impl);
}

MediaKeyError* JSMediaKeyError::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSMediaKeyError*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(ENCRYPTED_MEDIA) || ENABLE(ENCRYPTED_MEDIA_V2)
